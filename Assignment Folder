package wavelabs;
import java.util.*;

class Solution {
    public static  int networkDelayTime(int[][] times, int n, int k) {
       List<List<int[]>> graph = new ArrayList<>();
        for (int i = 0; i <= n; i++) {
            graph.add(new ArrayList<>());
        }
        for (int[] time : times) {
            graph.get(time[0]).add(new int[] {time[1], time[2]});
        }
        
        
        int[] dist = new int[n + 1];
        Arrays.fill(dist, Integer.MAX_VALUE);
        dist[k] = 0;
        
        
        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> a[1] - b[1]);
        pq.offer(new int[] {k, 0});
        while (!pq.isEmpty()) {
            int[] curr = pq.poll();
            int node = curr[0];
            int distance = curr[1];
            if (distance > dist[node]) {
                continue;
            }
            for (int[] neighbor : graph.get(node)) {
                int nextNode = neighbor[0];
                int nextDist = distance + neighbor[1];
                if (nextDist < dist[nextNode]) {
                    dist[nextNode] = nextDist;
                    pq.offer(new int[] {nextNode, nextDist});
                }
            }
        }
        
        // Maximum distance from the source node to any other node
        int maxDist = 0;
        for (int i = 1; i <= n; i++) {
            if (dist[i] == Integer.MAX_VALUE) {
                return -1; // There is a node that cannot receive the signal
            }
            maxDist = Math.max(maxDist, dist[i]);
        }
        return maxDist;
    }

    public static void main(String[] args) {
        int[][] times = {{2, 1, 1}, {2, 3, 1}, {3, 4, 1}};
        int n = 4;
        int k = 2;
        int result = networkDelayTime(times, n, k);
        System.out.println(result); 
    }
}

